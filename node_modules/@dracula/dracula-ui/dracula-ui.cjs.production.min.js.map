{"version":3,"file":"dracula-ui.cjs.production.min.js","sources":["../src/base/colors.ts","../src/base/spacing.ts","../src/components/Heading/Heading.tsx","../src/components/Text/Text.tsx","../src/components/Anchor/Anchor.tsx","../src/components/Paragraph/Paragraph.tsx","../src/components/Box/Box.tsx","../src/components/Button/Button.tsx","../src/components/Badge/Badge.tsx","../src/components/Avatar/Avatar.tsx","../src/components/Input/Input.tsx","../src/components/Select/Select.tsx","../src/components/Divider/Divider.tsx","../src/components/Radio/Radio.tsx","../src/components/Checkbox/Checkbox.tsx","../src/components/Switch/Switch.tsx","../src/components/Card/Card.tsx","../src/components/Tabs/Tabs.tsx","../src/components/Table/Table.tsx","../src/components/List/List.tsx"],"sourcesContent":["import mapValues from 'lodash/mapValues'\n\nexport const supportColors = {\n  white: 'drac-bg-white',\n  black: 'drac-bg-black',\n  blackSecondary: 'drac-bg-black-secondary',\n  blackLight: 'drac-bg-black-light'\n}\n\nexport const baseColors = {\n  cyan: 'drac-bg-cyan',\n  green: 'drac-bg-green',\n  orange: 'drac-bg-orange',\n  pink: 'drac-bg-pink',\n  purple: 'drac-bg-purple',\n  red: 'drac-bg-red',\n  yellow: 'drac-bg-yellow'\n}\n\nexport const gradientColors = {\n  purpleCyan: 'drac-bg-purple-cyan',\n  yellowPink: 'drac-bg-yellow-pink',\n  cyanGreen: 'drac-bg-cyan-green',\n  pinkPurple: 'drac-bg-pink-purple',\n  animated: 'drac-bg-animated'\n}\n\nexport const colors = {\n  ...supportColors,\n  ...baseColors,\n  ...gradientColors\n}\n\nexport type ColorNames = keyof typeof colors\nexport type ColorMap = Record<ColorNames, string>\n\nexport type SupportColorNames = keyof typeof supportColors\nexport type SupportColorMap = Record<SupportColorNames, string>\n\nexport type BaseColorNames = keyof typeof baseColors\nexport type BaseColorMap = Record<BaseColorNames, string>\n\nexport type GradientColorNames = keyof typeof gradientColors\nexport type GradientBaseColorMap = Record<GradientColorNames, string>\n\nexport const borderColors: BaseColorMap = mapValues(\n  colors,\n  (className) => className.replace('-bg-', '-border-')\n)\n\nexport const glowColors: BaseColorMap = mapValues(colors, (className) =>\n  className.replace('-bg-', '-glow-')\n)\n\nexport const baseTextColors: ColorMap = mapValues(colors, (className) => {\n  return className.replace('-bg-', '-text-')\n})\n\nexport const colorUtilities = {\n  classes: [\n    ...Object.values(baseColors),\n    ...Object.values(baseTextColors),\n    ...Object.values(supportColors),\n    ...Object.values(gradientColors),\n    ...Object.values(borderColors)\n  ],\n  react: {\n    base: Object.keys(baseColors),\n    text: Object.keys(baseTextColors),\n    support: Object.keys(supportColors),\n    gradient: Object.keys(gradientColors),\n    border: Object.keys(borderColors)\n  }\n}\n","import omit from 'lodash/omit'\nimport mapValues from 'lodash/mapValues'\n\nconst padding = {\n  none: 'drac-p-none',\n  xxs: 'drac-p-xxs',\n  xs: 'drac-p-xs',\n  sm: 'drac-p-sm',\n  md: 'drac-p-md',\n  lg: 'drac-p-lg'\n}\n\nconst paddingLeft = mapValues(padding, (clz) => clz.replace('-p-', '-pl-'))\nconst paddingRight = mapValues(padding, (clz) => clz.replace('-p-', '-pr-'))\nconst paddingTop = mapValues(padding, (clz) => clz.replace('-p-', '-pt-'))\nconst paddingBottom = mapValues(padding, (clz) => clz.replace('-p-', '-pb-'))\nconst paddingX = mapValues(padding, (clz) => clz.replace('-p-', '-px-'))\nconst paddingY = mapValues(padding, (clz) => clz.replace('-p-', '-py-'))\n\ntype paddingType = keyof typeof padding\nexport type PaddingMixin = {\n  p?: paddingType\n\n  py?: paddingType\n  px?: paddingType\n\n  pt?: paddingType\n  pb?: paddingType\n\n  pl?: paddingType\n  pr?: paddingType\n}\n\nexport function paddingMixin(mixin: PaddingMixin) {\n  let classes: string[] = []\n\n  if (mixin.p) {\n    classes.push(padding[mixin.p])\n  }\n\n  if (mixin.py) {\n    classes.push(paddingY[mixin.py])\n  }\n\n  if (mixin.px) {\n    classes.push(paddingX[mixin.px])\n  }\n\n  if (mixin.pt) {\n    classes.push(paddingTop[mixin.pt])\n  }\n\n  if (mixin.pb) {\n    classes.push(paddingBottom[mixin.pb])\n  }\n\n  if (mixin.pl) {\n    classes.push(paddingLeft[mixin.pl])\n  }\n\n  if (mixin.pr) {\n    classes.push(paddingRight[mixin.pr])\n  }\n\n  return classes\n}\n\nconst margin = {\n  none: 'drac-m-none',\n  xxs: 'drac-m-xxs',\n  xs: 'drac-m-xs',\n  sm: 'drac-m-sm',\n  md: 'drac-m-md',\n  lg: 'drac-m-lg'\n}\n\nconst mLeft = mapValues(margin, (clz) => clz.replace('-m-', '-ml-'))\nconst mRight = mapValues(margin, (clz) => clz.replace('-m-', '-mr-'))\nconst mTop = mapValues(margin, (clz) => clz.replace('-m-', '-mt-'))\nconst mBottom = mapValues(margin, (clz) => clz.replace('-m-', '-mb-'))\nconst mX = mapValues(margin, (clz) => clz.replace('-m-', '-mx-'))\nconst mY = mapValues(margin, (clz) => clz.replace('-m-', '-my-'))\n\ntype marginType = keyof typeof margin\nexport type MarginMixin = {\n  m?: marginType\n\n  my?: marginType\n  mx?: marginType\n\n  mt?: marginType\n  mb?: marginType\n\n  ml?: marginType\n  mr?: marginType\n}\n\nexport function marginMixin(mixin: MarginMixin) {\n  let classes: string[] = []\n\n  if (mixin.m) {\n    classes.push(margin[mixin.m])\n  }\n\n  if (mixin.my) {\n    classes.push(mY[mixin.my])\n  }\n\n  if (mixin.mx) {\n    classes.push(mX[mixin.mx])\n  }\n\n  if (mixin.mt) {\n    classes.push(mTop[mixin.mt])\n  }\n\n  if (mixin.mb) {\n    classes.push(mBottom[mixin.mb])\n  }\n\n  if (mixin.ml) {\n    classes.push(mLeft[mixin.ml])\n  }\n\n  if (mixin.mr) {\n    classes.push(mRight[mixin.mr])\n  }\n\n  return classes\n}\n\nexport const spacingUtilities = {\n  classes: {\n    padding: [\n      ...Object.values(padding),\n      ...Object.values(paddingX),\n      ...Object.values(paddingY),\n      ...Object.values(paddingTop),\n      ...Object.values(paddingBottom),\n      ...Object.values(paddingLeft),\n      ...Object.values(paddingRight)\n    ],\n    margin: [\n      ...Object.values(margin),\n      ...Object.values(mX),\n      ...Object.values(mY),\n      ...Object.values(mTop),\n      ...Object.values(mBottom),\n      ...Object.values(mRight),\n      ...Object.values(mLeft)\n    ]\n  },\n  react: {\n    padding: [`p`, `px`, `py`, `pt`, `pb`, `pl`, `pr`],\n    margin: [`m`, `mx`, `my`, `mt`, `mb`, `ml`, `mr`]\n  }\n}\n\n/**\n * Removes all spacing props from props object\n */\nexport function cleanProps<T>(\n  props: T & Partial<PaddingMixin> & Partial<MarginMixin>\n) {\n  return omit(props, [\n    ...spacingUtilities.react.padding,\n    ...spacingUtilities.react.margin\n  ]) as Omit<T, keyof PaddingMixin | keyof MarginMixin>\n}\n","import cx from 'classnames/dedupe'\nimport mapValues from 'lodash/mapValues'\nimport React, { HTMLAttributes } from 'react'\nimport { colors } from '../../base/colors'\nimport {\n  cleanProps,\n  marginMixin,\n  MarginMixin,\n  paddingMixin,\n  PaddingMixin\n} from '../../base/spacing'\n\nexport const headingSizes = {\n  '2xl': 'drac-heading-2xl',\n  xl: 'drac-heading-xl',\n  lg: 'drac-heading-lg',\n  md: 'drac-heading',\n  sm: 'drac-heading-sm',\n  xs: 'drac-heading-xs'\n}\n\nexport const headingColors = mapValues(colors, (className) => {\n  return className.replace('-bg-', '-text-')\n})\n\n/** Heading Props */\nexport interface HeadingProps\n  extends HTMLAttributes<HTMLHeadingElement>,\n    MarginMixin,\n    PaddingMixin {\n  /**\n   * The size and type of Heading to be used.\n   * Denotes hierarchy.\n   */\n  size?: keyof typeof headingSizes\n\n  /**\n   * The Dracula UI color to be applied to the Heading.\n   */\n  color?: keyof typeof headingColors\n\n  /** The HTML element to be used */\n  as?: keyof HTMLElementTagNameMap\n}\n\n/**\n * Heading is used to display headlines and other forms of hierarchical Text.\n *\n * Headings are similar to the base Text component, but restricted to certain\n * sizes and font weight.\n */\nexport const Heading: React.FC<HeadingProps> = (props: HeadingProps) => {\n  const { size, color, as, ...htmlProps } = props\n\n  const finalProps = {\n    ...htmlProps,\n    className: cx(\n      `drac-heading`,\n      props.className,\n      headingSizes[size ?? 'xl'],\n      headingColors[color ?? 'white'],\n      ...paddingMixin(props),\n      ...marginMixin(props)\n    )\n  }\n\n  return React.createElement(as ?? 'h2', cleanProps(finalProps), props.children)\n}\n\nHeading.displayName = 'Heading'\n","import cx from 'classnames/dedupe'\nimport mapValues from 'lodash/mapValues'\nimport React, { HTMLAttributes } from 'react'\nimport { colors } from '../../base/colors'\nimport {\n  cleanProps,\n  marginMixin,\n  MarginMixin,\n  paddingMixin,\n  PaddingMixin\n} from '../../base/spacing'\n\nexport const textSizes = {\n  md: 'drac-text',\n  lg: 'drac-text-lg',\n  sm: 'drac-text-sm',\n  xs: 'drac-text-xs'\n}\n\nexport const textWeights = {\n  normal: 'drac-text',\n  semibold: 'drac-text-semibold',\n  bold: 'drac-text-bold'\n}\n\nexport const lineHeights = {\n  md: 'drac-line-height',\n  xl: 'drac-line-height-xl',\n  lg: 'drac-line-height-lg',\n  sm: 'drac-line-height-sm',\n  xs: 'drac-line-height-xs'\n}\n\nexport const textColors = mapValues(colors, (className) => {\n  return className.replace('-bg-', '-text-')\n})\n\n/** Text Props */\nexport interface TextProps\n  extends HTMLAttributes<HTMLSpanElement>,\n  PaddingMixin,\n  MarginMixin {\n  /**\n   * Controls the size of the text based on pre-configured Dracula UI sizes.\n   */\n  size?: keyof typeof textSizes\n\n  /**\n   * Controls the weight of the text.\n   */\n  weight?: keyof typeof textWeights\n\n  /**\n   * Controls the line height of a text.\n   */\n  lineHeight?: keyof typeof lineHeights\n\n  /**\n   * Controls the color of the text\n   */\n  color?: keyof typeof textColors\n\n  /** The HTML element to be used */\n  as?: 'a' | 'span' | 'p'\n}\n\n/**\n * Text is the base component for any sort of text.\n *\n * Consumers of this component can control, the color, size,\n * weight, and spacing of Text.\n *\n * Use this component for generic, and non-hierarchical text that is\n * to be displayed on a page, or as part of other complex components\n * or UI patterns.\n */\nexport const Text = (props: TextProps) => {\n  const { size, weight, lineHeight, as, color, ...htmlProps } = props\n\n  const finalProps = {\n    ...htmlProps,\n    className: cx(\n      `drac-text`,\n      props.className,\n      textSizes[size ?? 'md'],\n      textWeights[weight ?? 'normal'],\n      lineHeights[lineHeight ?? 'md'],\n      textColors[color ?? 'white'],\n      ...paddingMixin(props),\n      ...marginMixin(props)\n    )\n  }\n\n  return React.createElement(\n    as ?? 'span',\n    cleanProps(finalProps),\n    props.children\n  )\n}\n\nText.displayName = 'Text'\n","import cx from 'classnames/dedupe'\nimport mapValues from 'lodash/mapValues'\nimport React, { AnchorHTMLAttributes } from 'react'\nimport {\n  cleanProps,\n  marginMixin,\n  MarginMixin,\n  paddingMixin,\n  PaddingMixin\n} from '../../base/spacing'\nimport { textColors, textSizes, textWeights } from '../Text/Text'\n\nexport const hoverColors = mapValues(textColors, (classname) => {\n  return `${classname}--hover`\n})\n\n/** Anchor Props */\nexport interface AnchorProps\n  extends AnchorHTMLAttributes<HTMLAnchorElement>,\n    PaddingMixin,\n    MarginMixin {\n  /**\n   * The path to link this anchor to.\n   */\n  href?: string\n\n  /**\n   * Controls the size of the link based on pre-configured Dracula UI sizes.\n   */\n  size?: keyof typeof textSizes\n\n  /**\n   * Controls the weight of the link.\n   */\n  weight?: keyof typeof textWeights\n\n  /**\n   * Controls the color of the link\n   */\n  color?: keyof typeof textColors\n\n  /**\n   * Controls the color of the link on hover\n   */\n  hoverColor?: keyof typeof hoverColors\n}\n\n/**\n * Anchor is an abstraction/style that can/is applied to HTML anchor elements.\n *\n * Consumers of this component can control, the color, size,\n * weight, and spacing of the Anchor.\n *\n * Use this component to create text or element based anchors around other HTML tags or React Components.\n */\nexport const Anchor = React.forwardRef<HTMLAnchorElement, AnchorProps>(\n  (props, ref) => {\n    const { size, weight, color, hoverColor, ...htmlProps } = props\n\n    const finalProps = cleanProps({\n      ...htmlProps,\n      className: cx(\n        `drac-anchor`,\n        `drac-text`,\n        props.className,\n        textSizes[size ?? 'md'],\n        textWeights[weight ?? 'normal'],\n        textColors[color ?? 'white'],\n        hoverColors[hoverColor ?? 'purple'],\n        ...paddingMixin(props),\n        ...marginMixin(props)\n      )\n    })\n\n    return (\n      <a ref={ref} {...finalProps}>\n        {props.children}\n      </a>\n    )\n  }\n)\n\nAnchor.displayName = 'Anchor'\n","import cx from 'classnames/dedupe'\nimport React from 'react'\nimport { cleanProps, marginMixin, paddingMixin } from '../../base/spacing'\nimport {\n  textColors,\n  TextProps,\n  textSizes,\n  lineHeights,\n  textWeights\n} from '../Text/Text'\n\n/**\n * Paragraph is a semantic component used for blocks of text with\n * semantic meaning.\n *\n * Paragraph accepts all the same customization options as Text.\n */\nexport const Paragraph: React.FC<TextProps> = (props: TextProps) => {\n  const { size, weight, lineHeight, color, ...htmlProps } = props\n\n  const finalProps = {\n    ...htmlProps,\n\n    className: cx(\n      `drac-text`,\n      props.className,\n      textSizes[size ?? 'md'],\n      textWeights[weight ?? 'normal'],\n      lineHeights[lineHeight ?? 'md'],\n      textColors[color ?? 'white'],\n      ...paddingMixin(props),\n      ...marginMixin(props)\n    )\n  }\n\n  return <p {...cleanProps(finalProps)}>{props.children}</p>\n}\n\nParagraph.displayName = 'Paragraph'\n","import cx from 'classnames/dedupe'\nimport React, { AllHTMLAttributes } from 'react'\nimport { borderColors, colors, glowColors } from '../../base/colors'\nimport {\n  PaddingMixin,\n  paddingMixin,\n  marginMixin,\n  MarginMixin,\n  cleanProps\n} from '../../base/spacing'\n\ntype Element = HTMLElementTagNameMap\n\nexport const roundedBorders = {\n  none: 'drac-rounded-none',\n  sm: 'drac-rounded-sm',\n  base: 'drac-rounded',\n  lg: 'drac-rounded-lg',\n  xl: 'drac-rounded-xl',\n  '2xl': 'drac-rounded-2xl',\n  '3xl': 'drac-rounded-3xl',\n  full: 'drac-rounded-full'\n}\n\n/**\n * Box Props\n */\nexport type BoxProps<K extends keyof Element = 'div'> = {\n  /** The background color. */\n  color?: keyof typeof colors\n\n  /** The glow color. */\n  glowColor?: keyof typeof glowColors\n\n  /** The border color. */\n  borderColor?: keyof typeof borderColors\n\n  /** The border radius. */\n  rounded?: keyof typeof roundedBorders\n\n  /** The HTML element to be used */\n  as?: K\n} & AllHTMLAttributes<K> &\n  PaddingMixin &\n  MarginMixin\n\n/**\n * Box is the most primitive component of Dracula UI.\n * Using Box allows for consumers of the components library to compose\n * more complex patterns, components, and UIs.\n *\n * Box includes built-in Color and Spacing properties that make building\n * complex components convenient and consistent.\n */\nexport function Box<T extends keyof Element>(props: BoxProps<T>) {\n  const {\n    color,\n    glowColor,\n    borderColor,\n    rounded,\n    as = 'div',\n    ...htmlProps\n  } = props\n\n  const finalProps = {\n    ...htmlProps,\n    className: cx(\n      `drac-box`,\n      props.className,\n      color && colors[color],\n      glowColor && glowColors[glowColor],\n      borderColor && borderColors[borderColor],\n      rounded && roundedBorders[rounded],\n      ...paddingMixin(props),\n      ...marginMixin(props)\n    )\n  }\n\n  return React.createElement(as, cleanProps(finalProps), props.children)\n}\n\nBox.displayName = 'Box'\n","import cx from 'classnames/dedupe'\nimport React, {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  InputHTMLAttributes\n} from 'react'\nimport { colors as backgroundColors } from '../../base/colors'\nimport {\n  cleanProps,\n  marginMixin,\n  MarginMixin,\n  paddingMixin,\n  PaddingMixin\n} from '../../base/spacing'\nimport { textColors } from '../../components/Text/Text'\n\nexport const buttonVariants = {\n  normal: 'drac-btn',\n  outline: 'drac-btn-outline',\n  ghost: 'drac-btn-ghost'\n}\n\nexport const buttonSizes = {\n  md: 'drac-btn',\n  lg: 'drac-btn-lg',\n  sm: 'drac-btn-sm',\n  xs: 'drac-btn-xs'\n}\n\n/** Button Props */\nexport type ButtonProps = PaddingMixin &\n  MarginMixin & {\n    /** A Dracula UI theme color for the Button. */\n    color?: keyof typeof backgroundColors\n\n    /**\n     * Controls the size of the button based on pre-configured Dracula UI sizes.\n     */\n    size?: keyof typeof buttonSizes\n\n    /**\n     * Controls the Button style:\n     * `normal` -> Default solid Button with background color.\n     * `outline` -> A subtle variation of the Button component with a softer background color that highlights the action text.\n     * `ghost` -> A less prominent variation of the Button component that highlights hover interactions.\n     */\n    variant?: keyof typeof buttonVariants\n\n    /**\n     * Controls the Button state. Mirrors the HTMLButtonElement `disabled` property.\n     */\n    disabled?: boolean\n  } & (\n    | ({\n        as: 'input'\n      } & InputHTMLAttributes<HTMLInputElement>)\n    | ({\n        as: 'a'\n      } & AnchorHTMLAttributes<HTMLAnchorElement>)\n    | ({\n        as?: 'button' | undefined\n      } & ButtonHTMLAttributes<HTMLButtonElement>)\n  )\n\n/**\n * The Button component triggers actions, behaviors, or events based\n * on user input.\n */\nexport const Button = React.forwardRef<\n  HTMLButtonElement | HTMLInputElement | HTMLAnchorElement,\n  ButtonProps\n>((props, ref) => {\n  const { color, size, variant, disabled, as, ...htmlProps } = props\n\n  const isOutline = variant === 'outline'\n  const isGhost = variant === 'ghost'\n  const overrideTextColor = isOutline || isGhost\n\n  const textColorClass = overrideTextColor\n    ? textColors[color ?? 'green']\n    : undefined\n\n  let backgroundClass = backgroundColors[color ?? 'green']\n  if (isGhost) {\n    backgroundClass = `${backgroundClass}-transparent`\n  }\n\n  const classes = cx(\n    'drac-btn',\n    props.className,\n    backgroundClass,\n    buttonVariants[variant ?? 'normal'],\n    buttonSizes[size ?? 'md'],\n    textColorClass,\n    ...paddingMixin(props),\n    ...marginMixin(props)\n  )\n\n  return React.createElement(\n    as ?? 'button',\n    { className: classes, disabled, ...cleanProps(htmlProps), ref },\n    props.children\n  )\n})\n\nButton.displayName = 'Button'\n","import cx from 'classnames/dedupe'\nimport React, { AllHTMLAttributes } from 'react'\nimport { colors as backgroundColors } from '../../base/colors'\nimport {\n  cleanProps,\n  MarginMixin,\n  marginMixin,\n  PaddingMixin,\n  paddingMixin\n} from '../../base/spacing'\nimport { Text, textColors } from '../../components/Text/Text'\n\nconst variants = {\n  normal: 'drac-badge',\n  subtle: 'drac-badge-subtle',\n  outline: 'drac-badge-outline'\n}\n\n/**\n * Badge Props\n */\nexport type BadgeProps = {\n  /**\n   * The theme variation color for a badge.\n   */\n  color?: keyof typeof backgroundColors\n\n  /**\n   * The variants for the Badge components.\n   * `normal` -> Default solid badge.\n   * `subtle` -> Subtler background, highlights the text.\n   * `outline` -> No background color, just borders and text.\n   */\n  variant?: keyof typeof variants\n} & AllHTMLAttributes<HTMLSpanElement> &\n  PaddingMixin &\n  MarginMixin\n\n/**\n * Badges are used to denote status or to highlight specific\n * information.\n */\nexport const Badge: React.FC<BadgeProps> = (props: BadgeProps) => {\n  const { variant, color = 'purple', children, ...htmlProps } = props\n\n  const isOutline = variant === 'outline'\n  const isSubtle = variant === 'subtle'\n  const overrideTextColor = isOutline || isSubtle\n\n  const textColorClass = overrideTextColor ? textColors[color] : undefined\n\n  let backgroundClass = backgroundColors[color]\n  if (isSubtle) {\n    backgroundClass = `${backgroundClass}-transparent`\n  }\n\n  const classes = cx(\n    'drac-badge',\n    props.className,\n    backgroundClass,\n    variants[props.variant ?? 'normal'],\n    textColorClass,\n    ...marginMixin(props),\n    ...paddingMixin(props)\n  )\n\n  return (\n    <span className={classes} {...cleanProps(htmlProps)}>\n      <Text color={overrideTextColor ? props.color : 'black'}>\n        {children}\n      </Text>\n    </span>\n  )\n}\n\nBadge.displayName = 'Badge'\n","import cx from 'classnames/dedupe'\nimport first from 'lodash/first'\nimport last from 'lodash/last'\nimport React, { ImgHTMLAttributes } from 'react'\nimport { colors as backgroundColors } from '../../base/colors'\nimport {\n  cleanProps,\n  MarginMixin,\n  marginMixin,\n  PaddingMixin,\n  paddingMixin\n} from '../../base/spacing'\nimport { Text, textColors } from '../../components/Text/Text'\n\nexport const AvatarVariants = {\n  normal: 'drac-avatar',\n  subtle: 'drac-avatar-subtle'\n}\n\nexport const AvatarBorderVariants = {\n  normal: '',\n  large: 'drac-avatar-lg-stroke',\n  none: 'drac-avatar-no-border'\n}\n\n/** Avatar Props */\nexport interface AvatarProps\n  extends ImgHTMLAttributes<HTMLSpanElement & HTMLImageElement>,\n    PaddingMixin,\n    MarginMixin {\n  /**\n   * The title or name to be used in the avatar.\n   */\n  title: string\n\n  /**\n   * The theme color for the avatar.\n   * This property controls the border and glow colors for the component.\n   */\n  color?: keyof typeof backgroundColors\n\n  /**\n   * The variant property allows for consumers to choose from\n   * a regular avatar, or a subtle variation.\n   */\n  variant?: keyof typeof AvatarVariants\n\n  /**\n   * Allows for controlling the border of the avatar.\n   * `large` -> to use a thicker border.\n   * `none` -> hides the border.\n   */\n  borderVariant?: keyof typeof AvatarBorderVariants\n\n  /**\n   * Sets the source for the profile picture.\n   */\n  src?: string\n}\n\n/**\n * The Avatar component is used to represent a user.\n *\n * It displays a profile picture, or falls back to the user's initials\n * if a profile pic is not provided.\n */\nexport const Avatar = (props: AvatarProps) => {\n  const { color, variant, borderVariant, src, title, ...htmlProps } = props\n\n  const backgroundClass = `${backgroundColors[color ?? 'green']}-transparent`\n\n  const classes = cx(\n    'drac-avatar',\n    props.className,\n    backgroundClass,\n    textColors[color ?? 'green'],\n    AvatarVariants[variant ?? 'normal'],\n    AvatarBorderVariants[borderVariant ?? 'normal'],\n    ...paddingMixin(props),\n    ...marginMixin(props)\n  )\n  const names = props.title.split(' ')\n\n  const f = first(names)?.slice(0, 1)\n  const l = last(names)?.slice(0, 1)\n\n  const style: React.HTMLAttributes<HTMLSpanElement>['style'] = {\n    ...props.style\n  }\n\n  if (props.src) {\n    style.backgroundImage = `url('${props.src}')`\n  }\n\n  return (\n    <span className={classes} style={style} {...cleanProps(htmlProps)}>\n      {!props.src && (\n        <Text color={props.color ?? 'white'}>\n          {f}\n          {l}\n        </Text>\n      )}\n    </span>\n  )\n}\n\nAvatar.displayName = 'Avatar'\n","import cx from 'classnames/dedupe'\nimport React, { InputHTMLAttributes } from 'react'\nimport { ColorMap } from '../../base/colors'\nimport {\n  cleanProps,\n  marginMixin,\n  MarginMixin,\n  paddingMixin,\n  PaddingMixin\n} from '../../base/spacing'\n\nexport const inputVariants = {\n  normal: 'drac-input',\n  outline: 'drac-input-outline'\n}\n\nexport const inputSizes = {\n  large: 'drac-input-lg',\n  medium: 'drac-input',\n  small: 'drac-input-sm'\n}\n\nexport const inputColors: Partial<ColorMap> = {\n  white: 'drac-input-white drac-text-white',\n  cyan: 'drac-input-cyan drac-text-cyan',\n  green: 'drac-input-green drac-text-green',\n  orange: 'drac-input-orange drac-text-orange',\n  pink: 'drac-input-pink drac-text-pink',\n  purple: 'drac-input-purple drac-text-purple',\n  red: 'drac-input-red drac-text-red',\n  yellow: 'drac-input-yellow drac-text-yellow'\n}\n\n/** Input Props */\nexport interface InputProps\n  extends Omit<InputHTMLAttributes<HTMLInputElement>, 'size' | 'type'>,\n    PaddingMixin,\n    MarginMixin {\n  /**\n   * The Dracula UI theme color to be used\n   */\n  color?: keyof typeof inputColors\n\n  /**\n   * Controls the size of the input based on pre-configured Dracula UI sizes.\n   */\n  size?: keyof typeof inputSizes | number\n\n  /**\n   * Controls the variation the input.\n   * `normal` -> Regular Input component with a light background color.\n   * `outline` -> Keeps the accent color, but removes the background.\n   */\n  variant?: keyof typeof inputVariants\n\n  /**\n   * Controls the type of the input.\n   */\n  type?:\n    | 'button'\n    | 'checkbox'\n    | 'color'\n    | 'date'\n    | 'datetime-local'\n    | 'email'\n    | 'file'\n    | 'hidden'\n    | 'image'\n    | 'month'\n    | 'number'\n    | 'password'\n    | 'radio'\n    | 'range'\n    | 'reset'\n    | 'search'\n    | 'submit'\n    | 'tel'\n    | 'text'\n    | 'time'\n    | 'url'\n    | 'week'\n}\n\n/**\n * Input is a styled HTML Input.\n *\n * There are no behavior changes applied to the native HTML tag other\n * than light styling done via CSS in order to keep inputs accessible.\n */\nexport const Input = React.forwardRef<HTMLInputElement, InputProps>(\n  (props, ref) => {\n    const { color, size, variant, ...htmlProps } = props\n\n    const finalProps: Record<string, any> = {\n      ...htmlProps,\n      className: cx(\n        `drac-input`,\n        props.className,\n        variant && inputVariants[variant],\n        size && typeof size === 'string' && inputSizes[size],\n        color && inputColors[color],\n        ...paddingMixin(props),\n        ...marginMixin(props)\n      )\n    }\n\n    if (size && typeof size === 'number') {\n      finalProps[size] = size\n    }\n\n    return <input ref={ref} {...cleanProps(finalProps)} />\n  }\n)\n\nInput.displayName = 'Input'\n","import cx from 'classnames/dedupe'\nimport React, { SelectHTMLAttributes } from 'react'\nimport { ColorMap } from '../../base/colors'\nimport {\n  cleanProps,\n  marginMixin,\n  MarginMixin,\n  paddingMixin,\n  PaddingMixin\n} from '../../base/spacing'\n\nexport const selectVariants = {\n  normal: 'drac-select',\n  outline: 'drac-select-outline'\n}\n\nexport const selectSizes = {\n  large: 'drac-select-lg',\n  medium: 'drac-select',\n  small: 'drac-select-sm'\n}\n\nexport const selectColors: Partial<ColorMap> = {\n  white: 'drac-select-white',\n  cyan: 'drac-select-cyan',\n  green: 'drac-select-green',\n  orange: 'drac-select-orange',\n  pink: 'drac-select-pink',\n  purple: 'drac-select-purple',\n  red: 'drac-select-red',\n  yellow: 'drac-select-yellow'\n}\n\n/** Select Props */\nexport interface SelectProps\n  extends Omit<SelectHTMLAttributes<HTMLSelectElement>, 'size'>,\n    PaddingMixin,\n    MarginMixin {\n  /** The Dracula UI theme color for the Select. */\n  color?: keyof typeof selectColors\n\n  /**\n   * Controls the size of the select based on pre-configured Dracula UI sizes.\n   */\n  size?:\n    | keyof typeof selectSizes\n    | SelectHTMLAttributes<HTMLSelectElement>['size']\n\n  /**\n   * The variation to be used for the Select element.\n   * `normal` -> Regular Select component with a light background color.\n   * `outline` -> Keeps the accent color, but removes the background.\n   */\n  variant?: keyof typeof selectVariants\n\n  /**\n   * A disabled select is unusable and un-clickable.\n   */\n  disabled?: boolean\n}\n\n/**\n * Select is a styled HTML Select element.\n *\n * There are no behavior changes applied to the native HTML tag other\n * than light styling done via CSS, and small SVG component in order to keep Selects accessible.\n */\nexport const Select = React.forwardRef<HTMLSelectElement, SelectProps>(\n  (props, ref) => {\n    const { size, variant, color, disabled, ...htmlProps } = props\n\n    const finalProps: SelectHTMLAttributes<HTMLSelectElement> = {\n      disabled,\n      ...htmlProps,\n      className: cx(\n        'drac-select',\n        props.className,\n        variant && selectVariants[variant],\n        typeof size === 'string' && size && selectSizes[size],\n        color && selectColors[color],\n        ...paddingMixin(props),\n        ...marginMixin(props)\n      )\n    }\n\n    if (typeof size === 'number') {\n      finalProps.size = size\n    }\n\n    return (\n      <div style={{ position: 'relative' }}>\n        <select ref={ref} {...cleanProps(finalProps)} />\n        <div className={`drac-select-arrow drac-text-${props.color}`}>\n          <svg\n            viewBox=\"0 0 24 24\"\n            focusable=\"false\"\n            role=\"presentation\"\n            aria-hidden=\"true\"\n          >\n            <path\n              fill=\"currentColor\"\n              d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n            ></path>\n          </svg>\n        </div>\n      </div>\n    )\n  }\n)\n\nSelect.displayName = 'Select'\n","import classNamesDedupe from 'classnames/dedupe'\nimport React, { HTMLAttributes } from 'react'\nimport { borderColors } from '../../base/colors'\nimport {\n  cleanProps,\n  MarginMixin,\n  marginMixin,\n  PaddingMixin,\n  paddingMixin\n} from '../../base/spacing'\n\nexport const dividerColors = borderColors\n\n/**\n * Divider Props\n */\nexport interface DividerProps\n  extends HTMLAttributes<HTMLDivElement>,\n    PaddingMixin,\n    MarginMixin {\n  /** The Dracula UI color for the Divider. */\n  color?: keyof typeof dividerColors\n}\n\n/**\n * Dividers are horizontal lines used to separate semantic blocks of\n * content or UI patterns.\n */\nexport const Divider: React.FC<DividerProps> = (props: DividerProps) => {\n  const { color, ...htmlProps } = props\n\n  const finalProps = {\n    ...htmlProps,\n    className: classNamesDedupe(\n      `drac-divider`,\n      props.className,\n      color && dividerColors[color],\n      ...paddingMixin(props),\n      ...marginMixin(props)\n    )\n  }\n\n  return <hr {...cleanProps(finalProps)} />\n}\n\nDivider.displayName = 'Divider'\n","import classNamesDedupe from 'classnames/dedupe'\nimport React, { InputHTMLAttributes } from 'react'\nimport { ColorMap } from '../../base/colors'\nimport {\n  cleanProps,\n  marginMixin,\n  MarginMixin,\n  paddingMixin,\n  PaddingMixin\n} from '../../base/spacing'\n\nexport const radioColors: Partial<ColorMap> = {\n  white: 'drac-radio-white',\n  cyan: 'drac-radio-cyan',\n  green: 'drac-radio-green',\n  orange: 'drac-radio-orange',\n  pink: 'drac-radio-pink',\n  purple: 'drac-radio-purple',\n  red: 'drac-radio-red',\n  yellow: 'drac-radio-yellow'\n}\n\n/** Radio Props */\nexport interface RadioProps\n  extends InputHTMLAttributes<HTMLInputElement>,\n    PaddingMixin,\n    MarginMixin {\n  /** The Dracula UI theme color for the radio button. */\n  color: keyof typeof radioColors\n\n  /** The name of the radio. Mirrors the name HTML attribute. */\n  name?: string\n\n  /** A disabled radio is unusable and un-clickable. */\n  disabled?: boolean\n}\n\n/**\n * Radio is a styled HTML Input of type radio.\n *\n * There are no behavior changes applied to the native HTML tag other\n * than light styling done via CSS in order to keep Radios accessible.\n */\nexport const Radio = React.forwardRef<HTMLInputElement, RadioProps>(\n  (props, ref) => {\n    const { color, name, disabled, ...htmlProps } = props\n\n    const finalProps = {\n      name,\n      disabled,\n      ...htmlProps,\n      className: classNamesDedupe(\n        `drac-radio`,\n        props.className,\n        radioColors[color],\n        ...paddingMixin(props),\n        ...marginMixin(props)\n      )\n    }\n\n    return <input type=\"radio\" ref={ref} {...cleanProps(finalProps)} />\n  }\n)\n\nRadio.displayName = 'Radio'\n","import cx from 'classnames/dedupe'\nimport React, { InputHTMLAttributes } from 'react'\nimport { ColorMap } from '../../base/colors'\nimport {\n  cleanProps,\n  marginMixin,\n  MarginMixin,\n  paddingMixin,\n  PaddingMixin\n} from '../../base/spacing'\n\nexport const checkboxColors: Partial<ColorMap> = {\n  white: 'drac-checkbox-white',\n  cyan: 'drac-checkbox-cyan',\n  green: 'drac-checkbox-green',\n  orange: 'drac-checkbox-orange',\n  pink: 'drac-checkbox-pink',\n  purple: 'drac-checkbox-purple',\n  red: 'drac-checkbox-red',\n  yellow: 'drac-checkbox-yellow'\n}\n\n/** Checkbox Props */\nexport interface CheckboxProps\n  extends InputHTMLAttributes<HTMLInputElement>,\n    PaddingMixin,\n    MarginMixin {\n  /** The Dracula UI theme color for the checkbox. */\n  color?: keyof typeof checkboxColors\n  /** The name of the checkbox. Mirrors the name HTML attribute. */\n  name?: string\n\n  /**\n   * A disabled checkbox is unusable and un-clickable.\n   */\n  disabled?: boolean\n}\n\n/**\n * Checkbox is a styled HTML Input of type checkbox.\n *\n * There are no behavior changes applied to the native HTML tag other\n * than light styling done via CSS in order to keep check boxes accessible.\n */\nexport const Checkbox = React.forwardRef<HTMLInputElement, CheckboxProps>(\n  (props, ref) => {\n    const { className, color, name, disabled, ...htmlProps } = props\n\n    const finalProps = {\n      name,\n      disabled,\n      ...htmlProps,\n      className: cx(\n        `drac-checkbox`,\n        className,\n        color && checkboxColors[color],\n        ...paddingMixin(props),\n        ...marginMixin(props)\n      )\n    }\n\n    return <input type=\"checkbox\" ref={ref} {...cleanProps(finalProps)} />\n  }\n)\n\nCheckbox.displayName = 'Checkbox'\n","import classNamesDedupe from 'classnames/dedupe'\nimport React, { InputHTMLAttributes } from 'react'\nimport { ColorMap } from '../../base/colors'\nimport {\n  cleanProps,\n  marginMixin,\n  MarginMixin,\n  paddingMixin,\n  PaddingMixin\n} from '../../base/spacing'\n\nexport const switchColors: Partial<ColorMap> = {\n  white: 'drac-switch-white',\n  cyan: 'drac-switch-cyan',\n  green: 'drac-switch-green',\n  orange: 'drac-switch-orange',\n  pink: 'drac-switch-pink',\n  purple: 'drac-switch-purple',\n  red: 'drac-switch-red',\n  yellow: 'drac-switch-yellow'\n}\n\n/** Switch Props. */\nexport interface SwitchProps\n  extends InputHTMLAttributes<HTMLInputElement>,\n    PaddingMixin,\n    MarginMixin {\n  /** The name of the form element. */\n  name?: string\n\n  /**\n   * The Dracula UI theme color to be applied to the Switch.\n   */\n  color: keyof typeof switchColors\n\n  /**\n   * A disabled switch is unusable and un-clickable.\n   */\n  disabled?: boolean\n}\n\n/**\n * Switch is an abstraction pattern that represents toggles.\n *\n * Use the Switch component as an alternative for Checkboxes or Radios\n * when options are binary.\n *\n * Switches are implemented as Checkboxes under the hood,\n * and work normally with forms.\n */\nexport const Switch = React.forwardRef<HTMLInputElement, SwitchProps>(\n  (props, ref) => {\n    const { name, color, disabled, ...htmlProps } = props\n\n    const finalProps = {\n      name,\n      disabled,\n      ...htmlProps,\n      className: classNamesDedupe(\n        `drac-switch`,\n        'drac-checkbox',\n        props.className,\n        switchColors[color],\n        ...paddingMixin(props),\n        ...marginMixin(props)\n      )\n    }\n\n    return <input type=\"checkbox\" ref={ref} {...cleanProps(finalProps)} />\n  }\n)\n\nSwitch.displayName = 'Switch'\n","import cx from 'classnames/dedupe'\nimport React from 'react'\nimport { borderColors, colors, glowColors } from '../../base/colors'\nimport { Box, BoxProps } from '../../components/Box/Box'\n\nexport const cardOrientations = {\n  normal: '',\n  portrait: 'drac-card-portrait'\n}\nexport type CardOrientationProps = keyof typeof cardOrientations\n\nexport const cardVariants = {\n  normal: '',\n  subtle: 'drac-card-subtle'\n}\nexport type CardVariantProps = keyof typeof cardVariants\n\n/** Card Props */\nexport interface CardProps extends BoxProps {\n  /**\n   * The Card display variant.\n   * `normal` -> Applies the chosen background color with dark text.\n   * `subtle` -> Inverts the theme color, and adds a slight glow to the Card. Use this when you don't want all your cards to stand out.\n   */\n  variant?: CardVariantProps\n}\n\n/**\n * Card is a high level Pattern Component use to group\n * related or hierarchical information.\n */\nexport const Card: React.FC<CardProps> = (props: CardProps) => {\n  const classNames = cx(\n    'drac-card',\n    props.className,\n    props.variant && cardVariants[props.variant],\n\n    // apply border color based on theme color\n    // @ts-ignore TODO: make sure border and background colors match\n    props.color && props.variant !== 'subtle' && colors[props.color],\n    // @ts-ignore TODO: make sure border and background colors match\n    props.color && props.variant === 'subtle' && borderColors[props.color],\n    props.glowColor && glowColors[props.glowColor]\n  )\n\n  return (\n    <Box {...props} className={classNames}>\n      {props.children}\n    </Box>\n  )\n}\n\nCard.displayName = 'Card'\n","import cx from 'classnames/dedupe'\nimport React, { HTMLAttributes } from 'react'\nimport { ColorMap } from '../../base/colors'\nimport {\n  cleanProps,\n  MarginMixin,\n  marginMixin,\n  PaddingMixin,\n  paddingMixin\n} from '../../base/spacing'\n\nexport const tabsColors: Partial<ColorMap> = {\n  white: 'drac-tabs-white',\n  cyan: 'drac-tabs-cyan',\n  green: 'drac-tabs-green',\n  orange: 'drac-tabs-orange',\n  pink: 'drac-tabs-pink',\n  purple: 'drac-tabs-purple',\n  red: 'drac-tabs-red',\n  yellow: 'drac-tabs-yellow'\n}\n\n/**\n * Tabs Props\n */\nexport interface TabsProps\n  extends HTMLAttributes<HTMLUListElement>,\n    PaddingMixin,\n    MarginMixin {\n  /** The Dracula UI color for the Tabs. */\n  color?: keyof typeof tabsColors\n}\n\n/**\n * Tabs are horizontal navigation elements used to display\n * content within the same page.\n */\nexport const Tabs: React.FC<TabsProps> = (props: TabsProps) => {\n  const { color, ...htmlProps } = props\n  const finalProps = {\n    ...htmlProps,\n    className: cx(\n      'drac-tabs',\n      props.className,\n      tabsColors[color ?? 'white'],\n      ...paddingMixin(props),\n      ...marginMixin(props)\n    )\n  }\n\n  return <ul {...cleanProps(finalProps)} />\n}\n\nTabs.displayName = 'Tabs'\n","import cx from 'classnames/dedupe'\nimport React, { TableHTMLAttributes } from 'react'\nimport { ColorMap } from '../../base/colors'\nimport {\n  cleanProps,\n  marginMixin,\n  MarginMixin,\n  paddingMixin,\n  PaddingMixin\n} from '../../base/spacing'\n\nexport const tableColors: Partial<ColorMap> = {\n  white: 'drac-table-white',\n  cyan: 'drac-table-cyan',\n  green: 'drac-table-green',\n  orange: 'drac-table-orange',\n  pink: 'drac-table-pink',\n  purple: 'drac-table-purple',\n  red: 'drac-table-red',\n  yellow: 'drac-table-yellow'\n}\n\nexport const tableVariants = {\n  normal: 'drac-table',\n  striped: 'drac-table-striped'\n}\n\n/**\n * Table Props\n */\nexport interface TableProps\n  extends TableHTMLAttributes<HTMLTableElement>,\n    PaddingMixin,\n    MarginMixin {\n  /** The Dracula UI color for the Table. */\n  color?: keyof typeof tableColors\n\n  /**\n   * The variation to be used for the Table element.\n   * `normal` -> Regular Table component without background colors.\n   * `striped` -> Changes the background color of each even row.\n   */\n  variant?: keyof typeof tableVariants\n}\n\n/**\n * Tables are used to display data in a tabular fashion.\n */\nexport const Table: React.FC<TableProps> = (props: TableProps) => {\n  const { color, variant, ...htmlProps } = props\n\n  const finalProps = {\n    ...htmlProps,\n    className: cx(\n      'drac-table',\n      props.className,\n      variant && tableVariants[variant],\n      color && tableColors[color],\n      ...paddingMixin(props),\n      ...marginMixin(props)\n    )\n  }\n\n  return <table {...cleanProps(finalProps)} />\n}\n\nTable.displayName = 'Table'\n","import cx from 'classnames/dedupe'\nimport React, { LiHTMLAttributes } from 'react'\nimport { ColorMap } from '../../base/colors'\nimport {\n  cleanProps,\n  marginMixin,\n  MarginMixin,\n  paddingMixin,\n  PaddingMixin\n} from '../../base/spacing'\n\nexport const listColors: Partial<ColorMap> = {\n  white: 'drac-list-white',\n  cyan: 'drac-list-cyan',\n  green: 'drac-list-green',\n  orange: 'drac-list-orange',\n  pink: 'drac-list-pink',\n  purple: 'drac-list-purple',\n  red: 'drac-list-red',\n  yellow: 'drac-list-yellow'\n}\n\nexport const listVariants = {\n  unordered: 'drac-list-unordered',\n  ordered: 'drac-list-ordered',\n  none: 'drac-list-none'\n}\n\n/**\n * List Props\n */\nexport interface ListProps\n  extends LiHTMLAttributes<HTMLOListElement>,\n    PaddingMixin,\n    MarginMixin {\n  /** The Dracula UI color for the List. */\n  color?: keyof typeof listColors\n\n  /**\n   * The variation to be used for the List element.\n   * `unordered` -> Display list in dashes as an `<ul>`\n   * `ordered` -> Display list in numbers as an `<ol>`\n   */\n  variant?: keyof typeof listVariants\n}\n\n/**\n * Lists are used to display list items in an ordered or unordered way.\n */\nexport const List: React.FC<ListProps> = (props: ListProps) => {\n  const { color, variant, ...htmlProps } = props\n\n  const finalProps = cleanProps({\n    ...htmlProps,\n    className: cx(\n      'drac-list',\n      props.className,\n      variant && listVariants[variant],\n      color && listColors[color],\n      ...paddingMixin(props),\n      ...marginMixin(props)\n    )\n  })\n\n  if (variant === 'unordered') {\n    return <ul {...finalProps} />\n  }\n\n  return <ol {...finalProps} />\n}\n\nList.displayName = 'List'\n"],"names":["supportColors","white","black","blackSecondary","blackLight","baseColors","cyan","green","orange","pink","purple","red","yellow","gradientColors","purpleCyan","yellowPink","cyanGreen","pinkPurple","animated","colors","borderColors","mapValues","className","replace","glowColors","baseTextColors","colorUtilities","classes","Object","values","react","base","keys","text","support","gradient","border","padding","none","xxs","xs","sm","md","lg","paddingLeft","clz","paddingRight","paddingTop","paddingBottom","paddingX","paddingY","paddingMixin","mixin","p","push","py","px","pt","pb","pl","pr","margin","mLeft","mRight","mTop","mBottom","mX","mY","marginMixin","m","my","mx","mt","mb","ml","mr","spacingUtilities","cleanProps","props","omit","headingSizes","xl","headingColors","Heading","size","color","as","finalProps","cx","React","createElement","children","displayName","textSizes","textWeights","normal","semibold","bold","lineHeights","textColors","Text","weight","lineHeight","hoverColors","classname","Anchor","forwardRef","ref","hoverColor","Paragraph","roundedBorders","full","Box","glowColor","borderColor","rounded","buttonVariants","outline","ghost","buttonSizes","Button","variant","disabled","htmlProps","isGhost","backgroundClass","backgroundColors","undefined","variants","subtle","Badge","isSubtle","overrideTextColor","AvatarVariants","AvatarBorderVariants","large","Avatar","borderVariant","src","names","title","split","f","first","_first","slice","l","last","_last","style","backgroundImage","inputVariants","inputSizes","medium","small","inputColors","Input","selectVariants","selectSizes","selectColors","Select","position","viewBox","focusable","role","fill","d","dividerColors","Divider","classNamesDedupe","radioColors","Radio","name","type","checkboxColors","Checkbox","switchColors","Switch","cardVariants","Card","classNames","tabsColors","Tabs","tableColors","tableVariants","striped","Table","listColors","listVariants","unordered","ordered","List","portrait"],"mappings":"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"}